"""
Copyright (C) 2020

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

import inspect
import math
import copy
import types
import random
import logging

import scipy.stats
import glom

import lamarckian


def ttest(ea):
    NAME_FUNC = inspect.getframeinfo(inspect.currentframe()).function
    PATH_FUNC = f'{__name__}.{NAME_FUNC}'

    def is_significant(individual, candidate, pvalue):
        if len(individual['results']) > 1:
            return scipy.stats.ttest_ind([result['fitness'] for result in candidate['results']], [result['fitness'] for result in individual['results']], equal_var=False)[1] < pvalue
        else:
            return True

    class EA(ea):
        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)
            assert not hasattr(self, PATH_FUNC)
            setattr(self, PATH_FUNC, types.SimpleNamespace(
                random=random.Random(glom.glom(kwargs['config'], 'seed', default=None)),
                pvalue=glom.glom(kwargs['config'], 'pvalue', default=0.05),
                debug=glom.glom(kwargs['config'], 'ec.ea.pbt.debug', default=False),
            ))

        def exploit(self, individual):
            attr = getattr(self, PATH_FUNC)
            index = individual['pbt']
            remaining = [individual for i, individual in enumerate(self.population) if i != index]
            candidate = attr.random.choice(remaining)
            if candidate['result']['fitness'] > individual['result']['fitness'] and is_significant(individual, candidate, attr.pvalue):
                if attr.debug:
                    logging.info(NAME_FUNC)
                return copy.deepcopy(candidate)
            return super().exploit(individual)
    return EA


def truncation(ea):
    NAME_FUNC = inspect.getframeinfo(inspect.currentframe()).function
    PATH_FUNC = f'{__name__}.{NAME_FUNC}'

    class EA(ea):
        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)
            assert not hasattr(self, PATH_FUNC)
            attr = types.SimpleNamespace(
                random=random.Random(glom.glom(kwargs['config'], 'seed', default=None)),
                eliminate=int(len(self.population) * glom.glom(kwargs['config'], f"ec.ea.pbt.eliminate", default=0.2)),
                pioneer=math.ceil(len(self.population) * glom.glom(kwargs['config'], f"ec.ea.pbt.pioneer", default=0.2)),
                debug=glom.glom(kwargs['config'], 'ec.ea.pbt.debug', default=False),
            )
            assert attr.pioneer > 0, attr.pioneer
            setattr(self, PATH_FUNC, attr)

        def mating(self, population):
            attr = getattr(self, PATH_FUNC)
            return attr.random.choice(population)

        def exploit(self, individual):
            attr = getattr(self, PATH_FUNC)
            population = sorted(copy.copy(self.population), key=lambda individual: individual['result']['fitness'], reverse=True)
            if attr.eliminate > 0 and individual['result']['fitness'] < population[len(population) - attr.eliminate]['result']['fitness']:
                if attr.debug:
                    logging.info(NAME_FUNC)
                return copy.deepcopy(self.mating(population[:attr.pioneer]))
            return super().exploit(individual)
    return EA
