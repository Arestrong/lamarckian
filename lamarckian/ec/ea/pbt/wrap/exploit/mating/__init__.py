"""
Copyright (C) 2020, 申瑞珉 (Ruimin Shen)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

import inspect
import types

import numpy as np
import scipy.spatial.distance
import glom

import lamarckian


def behavior(ea):
    NAME_FUNC = inspect.getframeinfo(inspect.currentframe()).function
    PATH_FUNC = f'{__name__}.{NAME_FUNC}'

    def get_dist(behaviors):
        matrix = scipy.spatial.distance.squareform(scipy.spatial.distance.pdist(behaviors))
        for i in range(len(matrix)):
            matrix[i, i] = np.finfo(matrix.dtype).max
        return matrix

    class EA(ea):
        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)
            assert not hasattr(self, PATH_FUNC)
            keys = glom.glom(kwargs['config'], 'ec.behavior')
            assert keys
            setattr(self, PATH_FUNC, types.SimpleNamespace(keys=keys))
            self.recorder.register(lamarckian.util.counter.Time(**glom.glom(self.kwargs['config'], 'record.plot')), lambda *args, **kwargs: lamarckian.util.record.plot.Scatter(
                'pbt/opponents', self.cost,
                getattr(self, PATH_FUNC).behaviors,
            ))

        def mating(self, population):
            attr = getattr(self, PATH_FUNC)
            attr.behaviors = np.array([[glom.glom(individual['result'], key) for key in attr.keys] for individual in population])
            matrix = get_dist(attr.behaviors)
            index = np.min(matrix, axis=1).argmax()
            return population[index]
    return EA
